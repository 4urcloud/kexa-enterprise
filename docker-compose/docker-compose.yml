name: "kexa-enterprise"

services:
  kexafrontend:
    build:
      context: git@github.com:4urcloud/Kexa_Saas_Front.git#dev
      ssh:
        - default=$HOME/.ssh/id_ed25519
    container_name: kexafrontend
    ports:
      - "9000:9000"
    environment:
      KEYCLOAK_URL: "http://localhost:8080/"
      KEYCLOAK_REALM: "latestRealm" # default Realm
      CRONICLE_API_KEY: "aFnqKjrP#hvnqDg992b@wXVTgQumC#m#K3i3T5t4hyAyMkK" # same as the one used in Cronicle & Kexa API
      URL_API_HOST: "http://localhost:4012/api" # Kexa API url (ending with /api)
      CRONICLE_URL: "http://localhost:3012/api" # Cronicle API url (ending with /api)
    networks:
      - kexanetwork
    depends_on:
      bddpostgresql:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      seq:
        condition: service_healthy
      # kexaapi:
      #   condition: service_healthy

  kexaapi:
    build:
      context: git@github.com:4urcloud/Kexa_API.git#dev
      ssh:
        - default=$HOME/.ssh/id_ed25519
    restart: always
    container_name: kexaapi
    ports:
      - "4012:4012"
    environment:
      KEYCLOAK_URL: "http://keycloak:8080/"
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_USER: admin
      KEXA_URL: "http://kexafrontend:9000/*"
      PORT: 4012
      SEQ_URL: "http://seq:5341"
      DATASOURCE_TYPE: postgres # mysql or postgres
      DS_HOST: bddpostgresql
      DS_PORT: 5432
      DS_USER: admin
      DS_PASSWORD: admn45
      DS_DATABASE: kexabdd
      DS_NAME: kexabdd
      SECRET_KEY: secretKey # same as in Cronicle DinD
      SECRET_IV: secretIV # same as in Cronicle DinD
      ENCRYPTION_METHOD: AES-256-CBC # same as Cronicle DinD
      DEFAULT_CLIENT_PASSWORD: defaultPassword # Choose init password, will be changed on first login
      DEFAULT_REALM_NAME: latestRealm # default Realm: same as in Kexa Frontend
      DEFAULT_API_KEY_NAME: KexaDefaultApiKey # same as in Cronicle DinD
      DEFAULT_API_KEY: "14e2511a-5d3f-4a4a-83e5-e6dead9f8bfb" # generate an uid
      CRONICLE_URL: "http://cronicle:3012/api"
      CRONICLE_API_KEY: "aFnqKjrP#hvnqDg992b@wXVTgQumC#m#K3i3T5t4hyAyMkK" # as you want
      HELM_APP_NAME: kexa-helm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4012/api/category/"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      bddpostgresql:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      seq:
        condition: service_healthy
    networks:
      - kexanetwork

  seq:
    image: datalust/seq:latest
    restart: always
    volumes:
      - ./seq:/data
    ports:
      - 5341:5341
      - 8441:80
    environment:
      ACCEPT_EULA: Y
      SEQ_FIRSTRUN_ADMINPASSWORD: admin45
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kexanetwork

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    user: root
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: 'true'
    command: ["start-dev"]
    depends_on:
      bddpostgresql:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { java.net.URI uri = java.net.URI.create(args[0]); System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)uri.toURL().openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live']
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak:/opt/keycloak/data
      - ./keycloak-script.sh:/tmp/keycloak-script.sh
    networks:
      - kexanetwork

  cronicle:
    image: innovtech/kexa-cronicle-local:arm64
    container_name: cronicle-dind-kexa
    ports:
      - "3012:3012"
    environment:
      API_KEY: "aFnqKjrP#hvnqDg992b@wXVTgQumC#m#K3i3T5t4hyAyMkK" # CRONICLE_API_KEY in Kexa API
      INTERFACE_CONFIGURATION_ENABLED: "true" # true for saas
      API_SECRET_KEY: "secretKey" # same as the one in Kexa API
      API_SECRET_IV: "secretIV" # same as the one in Kexa API
      API_ENCRYPTION_METHOD: "AES-256-CBC" # same as the one in Kexa API
      KEXA_API_URL: "http://kexaapi:4012/api"
      KEXA_API_TOKEN_NAME: "KexaDefaultApiKey" # DEFAULT_API_KEY_NAME in Kexa API
      KEXA_API_TOKEN: "14e2511a-5d3f-4a4a-83e5-e6dead9f8bfb" # DEFAULT_API_KEY in Kexa API
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:3012/api/app/ping || exit 1"]
      interval: 5s
      timeout: 1s
      retries: 3
    networks:
      - kexanetwork

  bddpostgresql:
    image: postgres:latest
    container_name: bddpostgresql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admn45
      POSTGRES_DB: kexabdd
      PGDATA: /var/lib/postgresql/data/pgdata # Emplacement des données à l'intérieur du conteneur
    volumes:
      - ./bddpostgresql:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kexanetwork

  grafana:
    image: grafana/grafana
    user: "${UID}:${GID}"
    ports:
      - "8082:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admn45
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=bddpostgresql
      - GF_DATABASE_NAME=kexabdd
      - GF_DATABASE_USER=admin
      - GF_DATABASE_PASSWORD=admn45
      - GF_DATABASE_SSL_MODE=disable
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana-dashboards/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./grafana-dashboards/dashboards:/var/lib/grafana/dashboards
    networks:
      - kexanetwork
    depends_on:
      bddpostgresql:
        condition: service_healthy

networks:
  kexanetwork:
    driver: bridge
